@page "/cart"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using app_web_net.Models
@using app_web_net.ViewModels
@using Microsoft.JSInterop
@inject CartViewModel ViewModel
@inject ArticleViewModel ProduitVM
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject OrderViewModel OrderVM

<PageTitle>Mon Panier</PageTitle>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Inter', sans-serif;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1.5rem;
    }

    .navbar {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background: #FFFFFF;
        border-bottom: 2px solid #E5E7EB;
        padding: 1.25rem 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        z-index: 1000;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

    .navbar-brand {
        font-size: 1.5rem;
        font-weight: 700;
        color: #2563EB;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

        .navbar-brand .logo-symbol {
            font-size: 1.75rem;
        }

    .navbar-menu {
        display: flex;
        gap: 2rem;
    }

    .navbar-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #4B5563;
        font-size: 0.9rem;
        font-weight: 500;
        text-decoration: none;
        padding: 0.75rem 1.25rem;
        border-radius: 8px;
        transition: all 0.3s ease;
        position: relative;
    }

        .navbar-item:hover {
            color: #2563EB;
            background: #EFF6FF;
            transform: translateY(-2px);
        }

        .navbar-item.active {
            color: #2563EB;
            font-weight: 600;
            background: #EFF6FF;
        }

            .navbar-item.active::after {
                content: '';
                position: absolute;
                bottom: -2px;
                left: 50%;
                transform: translateX(-50%);
                width: 80%;
                height: 2px;
                background: #2563EB;
            }

    .navbar-toggle {
        display: none;
        background: none;
        border: none;
        color: #2563EB;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .content-wrapper {
        padding-top: 120px; /* Clears the fixed navbar */
    }

    .header {
        background: #FFFFFF;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

    .title {
        font-size: 1.5rem;
        font-weight: 500;
        color: #2D2D2D;
    }

    .subtitle {
        font-size: 0.9rem;
        color: #6B7280;
    }

    .cart-grid {
        display: flex;
        gap: 1rem;
        margin-bottom: 1.5rem;
        flex-wrap: wrap;
    }

    .cart-item {
        background: #FFFFFF;
        border-radius: 8px;
        padding: 1rem;
        flex: 1;
        min-width: 300px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .item-title {
        font-size: 1rem;
        font-weight: 500;
        color: #2D2D2D;
    }

    .item-info {
        font-size: 0.8rem;
        color: #6B7280;
    }

    .quantity-controls {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin: 0.5rem 0;
    }

    .qty-btn {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 1px solid #D1D5DB;
        background: #FFFFFF;
        color: #3B82F6;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        visibility: visible !important;
    }

        .qty-btn:hover {
            background: #3B82F6;
            color: #FFFFFF;
        }

    .qty-input {
        width: 40px;
        padding: 0.5rem;
        border: 1px solid #D1D5DB;
        border-radius: 6px;
        text-align: center;
        font-size: 0.9rem;
    }

        .qty-input:focus {
            outline: none;
            border-color: #3B82F6;
        }

    .item-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 0.5rem;
    }

    .item-total {
        font-size: 1rem;
        font-weight: 500;
        color: #2D2D2D;
    }

    .btn-remove {
        background: transparent;
        border: 1px solid #EF4444;
        color: #EF4444;
        padding: 0.5rem;
        border-radius: 6px;
        cursor: pointer;
    }

        .btn-remove:hover {
            background: #EF4444;
            color: #FFFFFF;
        }

    .summary {
        background: #FFFFFF;
        border-radius: 8px;
        padding: 1rem;
        flex: 0 0 300px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .summary-title {
        font-size: 1.2rem;
        font-weight: 500;
        margin-bottom: 1rem;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
        color: #6B7280;
    }

    .summary-total {
        background: #EFF6FF;
        padding: 0.5rem;
        border-radius: 6px;
        margin: 1rem 0;
        text-align: center;
    }

    .btn-primary {
        width: 100%;
        background: #3B82F6;
        color: #FFFFFF;
        border: none;
        border-radius: 6px;
        padding: 0.75rem;
        font-size: 0.9rem;
        cursor: pointer;
        transition: background 0.2s ease;
        visibility: visible !important;
    }

        .btn-primary:hover {
            background: #2563EB;
        }

        .btn-primary:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .btn-secondary {
        background: transparent;
        color: #3B82F6;
        border: 1px solid #3B82F6;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
        cursor: pointer;
        text-decoration: none;
    }

        .btn-secondary:hover {
            background: #3B82F6;
            color: #FFFFFF;
        }

    .alert {
        padding: 0.5rem;
        border-radius: 6px;
        margin-bottom: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .alert.success {
            background: #D1FAE5;
            color: #065F46;
        }

        .alert.error {
            background: #FEE2E2;
            color: #991B1B;
        }

    .empty-state {
        text-align: center;
        padding: 2rem;
        background: #FFFFFF;
        border-radius: 8px;
    }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: #FFFFFF;
        border-radius: 8px;
        width: 90%;
        max-width: 400px;
        padding: 1rem;
        text-align: center;
    }

    .modal-title {
        font-size: 1.2rem;
        font-weight: 500;
        margin-bottom: 1rem;
    }

    .modal-body {
        margin-bottom: 1rem;
    }

    .success-icon {
        font-size: 2rem;
        color: #10B981;
        margin-bottom: 0.5rem;
    }

    .cart-badge {
        position: absolute;
        top: -12px;
        right: -12px;
        background: #2563EB;
        color: #FFFFFF;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: 600;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
</style>

<ErrorBoundary>
    <ChildContent>
        <!-- Navigation Menu -->
        <header class="navbar">
            <a href="/" class="navbar-brand">
                <span class="logo-symbol"></span>
                Gestion Panier
            </a>
            <button class="navbar-toggle" @onclick="ToggleMenu">
                <i class="fas @(isMenuOpen ? "fa-times" : "fa-bars")"></i>
            </button>
            <div class="navbar-menu @(isMenuOpen ? "active" : "")">
                <a href="/produits" class="navbar-item @(IsActive("/produits") ? "active" : "")">
                    <i class="fas fa-cubes"></i> Articles
                </a>
                <a href="/cart" class="navbar-item @(IsActive("/cart") ? "active" : "")">
                    <i class="fas fa-shopping-cart"></i> Panier
                    @if (cartCount > 0)
                    {
                        <span class="cart-badge">@cartCount</span>
                    }
                </a>
                <a href="/orders" class="navbar-item @(IsActive("/orders") ? "active" : "")">
                    <i class="fas fa-history"></i> Commandes
                </a>
            </div>
        </header>

        <div class="content-wrapper">
            <div class="container">
                <div class="header">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h1 class="title">Mon Panier</h1>
                            <p class="subtitle">
                                @if (ViewModel.Basket.Any())
                                {
                                    <span>@ViewModel.TotalUnits unité(s) • @ViewModel.TotalCost.ToString("N2") MAD</span>
                                }
                                else
                                {
                                    <span>Panier vide</span>
                                }
                            </p>
                        </div>
                        <a href="/produits" class="btn-secondary">
                            <i class="fas fa-arrow-left"></i> Continuer
                        </a>
                    </div>
                </div>

                @if (notifySuccess != null)
                {
                    <div class="alert success">
                        <span><i class="fas fa-check-circle"></i> @notifySuccess</span>
                        <button @onclick="() => notifySuccess = null" style="background: none; border: none; cursor: pointer;"><i class="fas fa-times"></i></button>
                    </div>
                }

                @if (notifyError != null)
                {
                    <div class="alert error">
                        <span><i class="fas fa-exclamation-circle"></i> @notifyError</span>
                        <button @onclick="() => notifyError = null" style="background: none; border: none; cursor: pointer;"><i class="fas fa-times"></i></button>
                    </div>
                }

                @if (ViewModel.Basket.Any())
                {
                    <div class="cart-grid">
                        <div>
                            <div style="display: flex; justify-content: space-between; margin-bottom: 1rem;">
                                <h2 class="title">Mes Produits</h2>
                                <button class="btn-secondary" @onclick="ClearBasket">Vider</button>
                            </div>

                            @foreach (var item in ViewModel.Basket)
                            {
                                <div class="cart-item">
                                    <div class="item-title">@item.Libelle</div>
                                    <div class="item-info">@item.CoutUnitaire.ToString("N2") MAD / unité</div>
                                    <div class="quantity-controls">
                                        <button class="qty-btn" @onclick="() => ChangeUnits(item.ProduitId, item.NombreUnites - 1)">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                        <input type="number" class="qty-input"
                                               @bind-value="item.NombreUnites"
                                               @bind-value:event="oninput"
                                               min="1"
                                               @onchange="(e) => ChangeQuantityHandler(item.ProduitId, e)" />
                                        <button class="qty-btn" @onclick="() => ChangeUnits(item.ProduitId, item.NombreUnites + 1)">
                                            <i class="fas fa-plus"></i>
                                        </button>
                                    </div>
                                    <div class="item-footer">
                                        <div class="item-total">@item.MontantTotal.ToString("N2") MAD</div>
                                        <button class="btn-remove" @onclick="() => RemoveProduct(item.ProduitId)">Retirer</button>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="summary">
                            <h3 class="summary-title">Récapitulatif</h3>
                            <div class="summary-row">
                                <span>Unités</span>
                                <span>@ViewModel.TotalUnits</span>
                            </div>
                            <div class="summary-row">
                                <span>Total</span>
                                <span>@ViewModel.TotalCost.ToString("N2") MAD</span>
                            </div>
                            <div class="summary-total">
                                <span>Total à payer: @ViewModel.TotalCost.ToString("N2") MAD</span>
                            </div>
                            <button class="btn-primary" @onclick="ProcessOrder" disabled="@isBusy">
                                @if (isBusy)
                                {
                                    <span><i class="fas fa-spinner fa-spin"></i> En cours...</span>
                                }
                                else
                                {
                                    <span><i class="fas fa-check"></i> Valider</span>
                                }
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-shopping-cart" style="font-size: 2rem; color: #6B7280;"></i>
                        <h2 style="font-size: 1.2rem; color: #2D2D2D;">Panier vide</h2>
                        @* <a href="/produits" class="btn-primary">Voir les produits</a> *@
                    </div>
                }

                @if (showOrderConfirmation)
                {
                    <div class="modal">
                        <div class="modal-content">
                            <div class="modal-title">Commande Confirmée</div>
                            <div class="modal-body">
                                <i class="fas fa-check-circle success-icon"></i>
                                <p>Merci pour votre commande !</p>
                                <p>Total: @finalTotal.ToString("N2") MAD</p>
                            </div>
                            <div style="display: flex; justify-content: center;">
                                <button class="btn-primary" @onclick="NavigateToProducts">Retour aux produits</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </ChildContent>
    <ErrorContent>
        <div style="padding: 2rem; text-align: center; color: #991B1B;">
            <p>Une erreur est survenue lors du rendu de la page. Veuillez recharger la page ou contacter le support.</p>
        </div>
    </ErrorContent>
</ErrorBoundary>

@code {
    private bool isBusy = false;
    private string? notifySuccess;
    private string? notifyError;
    private bool showOrderConfirmation = false;
    private decimal finalTotal = 0;
    private int cartCount = 0;
    private bool isMenuOpen = false;


    private async Task FetchCart()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "panier");
            if (!string.IsNullOrEmpty(json))
            {
                var items = JsonSerializer.Deserialize<List<PanierItemViewModel>>(json);
                if (items != null)
                {
                    ViewModel.ImportFromJson(items);
                    Console.WriteLine($"Fetched {items.Count} items from localStorage: {json}");
                }
                else
                {
                    Console.WriteLine("No items found in localStorage");
                }
            }
            else
            {
                Console.WriteLine("localStorage 'panier' is empty");
            }
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors du chargement du panier : {ex.Message}";
            Console.WriteLine($"FetchCart Error: {ex}");
        }
        StateHasChanged();
    }

    private async Task UpdateCartCount()
    {
        try
        {
            var json = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "panier");
            if (!string.IsNullOrEmpty(json))
            {
                var items = JsonSerializer.Deserialize<List<PanierItemViewModel>>(json);
                cartCount = items?.Sum(i => i.NombreUnites) ?? 0;
            }
            else
            {
                cartCount = 0;
            }
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors de la mise à jour du panier : {ex.Message}";
            cartCount = 0;
            Console.WriteLine($"UpdateCartCount Error: {ex}");
        }
        StateHasChanged();
    }

    private async Task StoreCart()
    {
        try
        {
            var items = ViewModel.GetJsonData();
            var json = JsonSerializer.Serialize(items);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "panier", json);
            await UpdateCartCount();
            Console.WriteLine($"Stored cart to localStorage: {json}");
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors de la sauvegarde du panier : {ex.Message}";
            Console.WriteLine($"StoreCart Error: {ex}");
        }
    }

    private async Task ChangeQuantityHandler(int productId, ChangeEventArgs e)
    {
        try
        {
            if (int.TryParse(e.Value?.ToString(), out int units) && units >= 1)
            {
                await ChangeUnits(productId, units);
                Console.WriteLine($"Changed quantity for product {productId} to {units}");
            }
            else
            {
                notifyError = "La quantité doit être un nombre positif";
                Console.WriteLine($"Invalid quantity input for product {productId}: {e.Value}");
            }
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors de la mise à jour de la quantité : {ex.Message}";
            Console.WriteLine($"ChangeQuantityHandler Error: {ex}");
        }
        StateHasChanged();
    }

    private async Task ChangeUnits(int productId, int units)
    {
        try
        {
            if (units < 1)
            {
                await RemoveProduct(productId);
                return;
            }
            ViewModel.SetUnits(productId, units);
            await StoreCart();
            Console.WriteLine($"Set units for product {productId} to {units}");
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors de la mise à jour de la quantité : {ex.Message}";
            Console.WriteLine($"ChangeUnits Error: {ex}");
        }
        StateHasChanged();
    }

    private async Task RemoveProduct(int productId)
    {
        try
        {
            ViewModel.DropProduct(productId);
            await StoreCart();
            notifySuccess = "Produit retiré";
            Console.WriteLine($"Removed product {productId} from cart");
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors du retrait du produit : {ex.Message}";
            Console.WriteLine($"RemoveProduct Error: {ex}");
        }
        StateHasChanged();
    }

    private async Task ClearBasket()
    {
        try
        {
            ViewModel.ResetCart();
            await StoreCart();
            notifySuccess = "Panier vidé";
            Console.WriteLine("Cart cleared");
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors du vidage du panier : {ex.Message}";
            Console.WriteLine($"ClearBasket Error: {ex}");
        }
        StateHasChanged();
    }

    private async Task ProcessOrder()
    {
        isBusy = true;
        notifyError = null;
        notifySuccess = null;
        StateHasChanged();

        try
        {
            if (!ViewModel.Basket.Any())
            {
                notifyError = "Le panier est vide";
                Console.WriteLine("ProcessOrder: Empty cart");
                return;
            }

            foreach (var item in ViewModel.Basket.ToList())
            {
                var product = ProduitVM.Inventaire.FirstOrDefault(p => p.ArticleId == item.ProduitId);
                if (product == null)
                {
                    notifyError = $"Produit {item.Libelle} introuvable";
                    Console.WriteLine($"ProcessOrder: Product {item.ProduitId} not found");
                    return;
                }
                if (product.StockDisponible < item.NombreUnites)
                {
                    notifyError = $"Stock insuffisant pour {item.Libelle} ({product.StockDisponible} disponible)";
                    Console.WriteLine($"ProcessOrder: Insufficient stock for {item.Libelle} (Available: {product.StockDisponible}, Requested: {item.NombreUnites})");
                    return;
                }
            }

            foreach (var item in ViewModel.Basket.ToList())
            {
                var product = ProduitVM.Inventaire.First(p => p.ArticleId == item.ProduitId);
                var result = await ProduitVM.UpdateInventory(item.ProduitId, product.StockDisponible - item.NombreUnites);
                if (!result)
                {
                    notifyError = $"Erreur lors de la mise à jour du stock pour {item.Libelle}";
                    Console.WriteLine($"ProcessOrder: Failed to update stock for {item.Libelle}");
                    return;
                }
                Console.WriteLine($"Updated stock for {item.Libelle}: {product.StockDisponible - item.NombreUnites}");
            }

            var items = ViewModel.GetJsonData();
            string adresseExpedition = "Adresse par défaut";
            int acheteurId = 1;
            var orderCreated = await OrderVM.PlaceOrderAsync(items, adresseExpedition, acheteurId);

            if (orderCreated)
            {
                finalTotal = ViewModel.TotalCost;
                ViewModel.ResetCart();
                await StoreCart();
                showOrderConfirmation = true;
                notifySuccess = "Commande validée avec succès";
                Console.WriteLine($"Order placed successfully, total: {finalTotal}");
            }
            else
            {
                notifyError = "Erreur lors de la création de la commande";
                Console.WriteLine("ProcessOrder: Failed to create order");
            }
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors du traitement de la commande : {ex.Message}";
            Console.WriteLine($"ProcessOrder Error: {ex}");
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }

    private void NavigateToProducts()
    {
        try
        {
            showOrderConfirmation = false;
            Navigation.NavigateTo("/produits");
            Console.WriteLine("Navigated to /produits");
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors de la navigation : {ex.Message}";
            Console.WriteLine($"NavigateToProducts Error: {ex}");
        }
        StateHasChanged();
    }

    private void ToggleMenu()
    {
        try
        {
            Console.WriteLine($"Toggling menu, current state: {isMenuOpen}");
            isMenuOpen = !isMenuOpen;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            notifyError = $"Erreur lors du basculement du menu : {ex.Message}";
            Console.WriteLine($"ToggleMenu Error: {ex}");
        }
    }

    private bool IsActive(string path)
    {
        try
        {
            return Navigation.Uri.EndsWith(path, StringComparison.OrdinalIgnoreCase);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"IsActive Error for path {path}: {ex.Message}");
            return false;
        }
    }



    //system function
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await FetchCart();
                await ProduitVM.FetchItems();
                await UpdateCartCount();
                Console.WriteLine($"Fetched {ViewModel.Basket.Count} cart items, {ProduitVM.Inventaire.Count} products");
            }
            catch (Exception ex)
            {
                notifyError = $"Erreur lors du chargement initial : {ex.Message}";
                Console.WriteLine($"OnAfterRenderAsync Error: {ex}");
            }
            StateHasChanged();
        }
    }
}